package com.kalpesh.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.kalpesh.pojo.Student;
import com.kalpesh.repository.StudentRepository;

@RestController
@RequestMapping("/api")
public class StudentController {
	
	@Autowired
	 StudentRepository studentrepository;

	@PostMapping("/student")
	public String createStudent(@RequestBody Student student)
	{
		  try {
			  studentrepository.save(student);
	            return "Student inserted successfully";
	        } catch (Exception e) {
	            return "Failed to insert student";
	        }
		
	}
	
	@GetMapping("/student")
	public ResponseEntity<List<Student>> getAllStudents()
	{
		List<Student> studentslist = new ArrayList<>();
		studentrepository.findAll().forEach(studentslist::add);
		return new ResponseEntity<List<Student>>(studentslist,HttpStatus.OK);
	}
	
	
	
	
	
	@GetMapping("/student/{id}")
	public ResponseEntity<Student> getStudentByID(@PathVariable int id)
	{
		Optional<Student> findById = studentrepository.findById(id);
		
		if(findById.isPresent()) {
		
		return new ResponseEntity<Student>(findById.get(),HttpStatus.FOUND);
		}
		else
		{
			return new ResponseEntity<Student>(HttpStatus.FOUND);
		}
		
	}
	
	
	
	@PutMapping("/student/{id}")
	public String updateStudentById(@PathVariable int id, @ResponseBody Student student)
	{
		Optional<Student> studentbyid = studentrepository.findById(id);
		if(studentbyid.isPresent()) {
			Student existStudent = studentbyid.get();
			existStudent.setName(student.getName());
			existStudent.setAddress(student.getAddress());
			existStudent.setContact(student.getContact());
			studentrepository.save(existStudent);
			
			return "Student Details of Roll No "+id+ " is Updated";
		}
		else {
			return "Student Details of Roll No "+id+ " are not Exists";
		}
		
	}
	
	
}
